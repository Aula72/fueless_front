import { RefObject } from 'preact';
import { PositionData } from '../hooks/UNSAFE_useFloating';
import { Offset, Placement, Coords, Rect } from '../hooks/UNSAFE_useFloating';
import { HTMLAttributesSignalExcluded } from '../utils/UNSAFE_attributeUtils';
declare type IntrinsicProps = Pick<HTMLAttributesSignalExcluded<HTMLDivElement>, 'children' | 'class'>;
declare type FlipOptions = {
    mainAxis?: boolean;
    crossAxis?: boolean;
};
declare type ShiftOptions = {
    mainAxis?: boolean;
    crossAxis?: boolean;
};
declare type Props = IntrinsicProps & {
    /**
     * Placement of the floating element relative to the trigger.
     * Possible values are:
     * <p> <code>'top' </code> <code>'top-start' </code> <code> 'top-end' </code> <code> 'top-start-corner' </code> <code> 'top-end-corner' </code>
     * <code> 'end' </code> <code> 'end-top'  </code> <code> 'end-bottom' </code> <code> 'end-top-corner' </code> <code> 'end-bottom-corner' </code>
     * <code> 'bottom'  </code> <code> 'bottom-start'  </code> <code> 'bottom-end' </code> <code> 'bottom-start-corner' </code> <code> 'bottom-end-corner' </code>
     * <code> 'start' </code> <code> 'start-top'  </code> <code> 'start-bottom' </code> <code> 'start-top-corner' </code> <code> 'start-bottom-corner' </code>
     * </p>
     */
    placement?: Placement;
    /**
     * Trigger element reference.
     */
    anchorRef: RefObject<Element | Coords>;
    /**
     * Placement offset.
     * Offset displaces the floating element from its core placement along the specified axes.
     * Offset could be a number, object or a function.
     * A number represents the distance (gutter or margin) between the floating element and the reference element.
     * This is shorthand for mainAxis.
     * <pre>
     *   {
     *     mainAxis?: number;
     *     crossAxis?: number;
     *   }
     * </pre>
     * <p><code>mainAxis</code> represents the distance (gutter or margin) between the floating element and the reference element.</p>
     * <p><code>crossAxis</code> represents the shifting between the floating element and the reference element.<p>
     * You may also pass a function which returns the previously listed values â€” this enables you to read the dimensions of the reference or floating elements and the current placement.
     * <pre>
     * (args: {
     *   floating: Rect;
     *   reference: Rect;
     *   placement: Placement;
     * }) => OffsetValue
     * </pre>
     */
    offsetValue?: Offset;
    /**
     * Click outside callback.
     */
    onClickOutside?: (event: MouseEvent) => void;
    /**
     * Specifies the flipping behavior along the respective axis.
     * When true, the floating element will be flipped to prevent overflow.
     * Default values are 'true' for mainAxis and 'false' for crossAxis.
     */
    flipOptions?: FlipOptions;
    /**
     * Specifies the shift behavior along the respective axis.
     * When true, the floating element will shift to prevent overflow.
     * Default values are 'true' for mainAxis and 'false' for crossAxis.
     */
    shiftOptions?: ShiftOptions;
    /**
     *  Triggered when placement or coordinates are changed after collision is detected
     */
    onPosition?: (data: PositionData) => void;
    /**
     * Tail
     */
    tail?: 'none' | 'simple';
};
/**
 * A floating component allows the user to create a floating element that is displayed on the the "top layer" of all other elements.
 *  The Floating component is an advanced component and is used underneath Popup, Tooltip, SelectMultiple, Menu and other components.
 */
export declare const Floating: import("preact").FunctionalComponent<Omit<Props, "ref"> & {
    ref?: import("preact").Ref<HTMLElement | null> | undefined;
}>;
export { Offset, Placement, Coords, Rect, FlipOptions, ShiftOptions, PositionData };
