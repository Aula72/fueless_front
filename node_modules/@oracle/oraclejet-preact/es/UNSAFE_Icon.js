/* @oracle/oraclejet-preact: 14.0.4 */
import { _ as __rest } from './tslib.es6-5eaa88c2.js';
import { jsx, jsxs } from 'preact/jsx-runtime';
import { Fragment } from 'preact';
import "./UNSAFE_Icon.css";
import { classNames } from './utils/UNSAFE_classNames.js';
import { useTooltip } from './hooks/UNSAFE_useTooltip.js';
import { useUser } from './hooks/UNSAFE_useUser.js';
import { useTheme } from './hooks/UNSAFE_useTheme.js';
import 'preact/hooks';
import './hooks/UNSAFE_useId.js';
import './UNSAFE_Floating.js';
import 'preact/compat';
import './index-35a194f0.js';
import './utils/PRIVATE_floatingUtils.js';
import './utils/PRIVATE_refUtils.js';
import './hooks/UNSAFE_useOutsideClick.js';
import './utils/UNSAFE_arrayUtils.js';
import './UNSAFE_Environment.js';
import './UNSAFE_Layer.js';
import './hooks/UNSAFE_useHover.js';
import './hooks/UNSAFE_useToggle.js';
import './hooks/UNSAFE_useFocus.js';
import './hooks/UNSAFE_useTouch.js';
import './utils/UNSAFE_mergeProps.js';
import './hooks/UNSAFE_useAnimation.js';

const Icon = ({
  size = '1em',
  color = 'currentColor',
  accessibleLabel = '',
  viewBox = 'none',
  children
}) => jsx(Svg, Object.assign({
  height: "1em",
  width: "1em",
  viewBox: viewBox,
  accessibleLabel: accessibleLabel,
  class: classNames([colorStyles[color], sizeStyles[size]])
}, {
  children: children
}));

const Svg = _a => {
  var {
    accessibleLabel
  } = _a,
      otherProps = __rest(_a, ["accessibleLabel"]);

  return accessibleLabel ? jsx(SemanticSvg, Object.assign({
    accessibleLabel: accessibleLabel
  }, otherProps)) : jsx(DecorativeSvg, Object.assign({}, otherProps));
};

const DecorativeSvg = props => jsx("svg", Object.assign({}, props));

const SemanticSvg = _a => {
  var {
    accessibleLabel,
    children
  } = _a,
      props = __rest(_a, ["accessibleLabel", "children"]);

  const {
    tooltipContent,
    tooltipProps
  } = useTooltip({
    text: accessibleLabel,
    anchor: {
      x: 'element',
      y: 'element'
    },
    position: 'bottom',
    offset: {
      mainAxis: 8,
      crossAxis: 0
    }
  });
  return jsxs(Fragment, {
    children: [jsx("svg", Object.assign({
      role: "img"
    }, props, tooltipProps, {
      "aria-label": accessibleLabel
    }, {
      children: children
    })), tooltipContent]
  });
}; // TODO: Remove this and refactor as necessary to uptake
// the dimensions type and values when they're available.
// See JET-50717


const sizeStyles = {
  '1em': "stpeao",
  '1x': "_10t9et9",
  '2x': "_1jl741",
  '3x': "dyxnv",
  '4x': "p51eya",
  '5x': "ish6tn",
  '6x': "jziuoy",
  '7x': "lsp8sp",
  '8x': "_15f910y",
  '9x': "miy7mr",
  '10x': "cweser",
  '11x': "_1soh8sl",
  '12x': "_79ut0a"
};
const colorStyles = {
  primary: "_1383adx",
  secondary: "_2o4m1q",
  disabled: "ibe2wa",
  danger: "_1guxabd",
  warning: "_1j3xk5j",
  success: "_1ik2r0a",
  info: "_1dxvn5o",
  currentColor: "_6herao"
};

// Returns a component that renders one of the given icon components based on reading direction
const withDirectionIcon = (LtrIcon, RtlIcon) => {
    return (props) => {
        const { direction } = useUser();
        return direction === 'ltr' ? jsx(LtrIcon, Object.assign({}, props)) : jsx(RtlIcon, Object.assign({}, props));
    };
};

// Returns a component that renders one of the given icon components based on theme
const withThemeIcon = (themeIcons) => {
    return (props) => {
        const { name } = useTheme();
        const Component = themeIcons[name];
        return jsx(Component, Object.assign({}, props));
    };
};

export { Icon, withDirectionIcon, withThemeIcon };
/*  */
//# sourceMappingURL=UNSAFE_Icon.js.map
