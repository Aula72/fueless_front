/* @oracle/oraclejet-preact: 14.0.4 */
import { jsx } from 'preact/jsx-runtime';
import "./UNSAFE_PrefixSuffix.css";
import { classNames } from './utils/UNSAFE_classNames.js';

function PrefixSuffix({
  hasEndContent,
  hasInsideLabel,
  hasStartContent,
  id,
  isDisabled,
  isFocused,
  text,
  variant
}) {
  const prefixSuffixStyles = {
    base: "_17pcfk9",
    isFocused: "_1es4scm",
    isDisabled: "_1bmdyy2",
    insideLabel: "g2hmfj",
    prefixHasStartContent: "kgvgx1",
    suffixHasEndContent: "_5r18wa",
    prefixInlineStart: "wg44rl",
    suffixInlineStart: "_1vkunw8"
  }; // We want the input to have padding on itself. This gives the user more space to click on to set focus to the input.
  // The prefix/suffix need padding between itself and either the 'edge' or the 'startContent'/'endContent'.
  // So the logic is:
  // if no startContent and we have a prefix, add --text-to-edge-padding to the prefix
  // if no endContent and we have a suffix, add --text-to-edge-padding to the suffix
  // if startContent and we have a prefix, add text-field-icon-to-text-padding
  // if endContent and we have a suffix, add text-field-icon-to-text-padding
  // **-- text-to-edge-padding**prefix (input has padding for prefix/input)input(input has padding for suffix/input)suffix**--text-to-edge-padding**
  // -- (this should be in startContent)startContent **icon-to-text-padding**prefix (input has padding for prefix/input)input(input has padding for suffix/input) suffix **--text-to-edge-padding**
  // -- **icon-to-text-padding**prefix (input has padding for prefix/input)input(input has padding for suffix/input) suffix**--icon-to-text-padding**(this should be in endContent)endContent

  const prefixSuffixClasses = classNames([prefixSuffixStyles.base, variant === 'suffix' && hasEndContent && prefixSuffixStyles.suffixHasEndContent, hasInsideLabel && prefixSuffixStyles.insideLabel, variant === 'prefix' && hasStartContent && prefixSuffixStyles.prefixHasStartContent, isFocused && prefixSuffixStyles.isFocused, isDisabled && prefixSuffixStyles.isDisabled, variant === 'prefix' && !hasStartContent && prefixSuffixStyles.prefixInlineStart, variant === 'suffix' && !hasEndContent && prefixSuffixStyles.suffixInlineStart]);
  return jsx("div", Object.assign({
    class: prefixSuffixClasses,
    id: id
  }, {
    children: jsx("span", {
      children: text
    })
  }));
}

export { PrefixSuffix };
/*  */
//# sourceMappingURL=UNSAFE_PrefixSuffix.js.map
