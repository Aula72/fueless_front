/* @oracle/oraclejet-preact: 14.0.4 */
'use strict';

var tslib_es6 = require('./tslib.es6-e79a0c43.js');
var jsxRuntime = require('preact/jsx-runtime');
var hooks_UNSAFE_usePress = require('./hooks/UNSAFE_usePress.js');
var hooks_UNSAFE_useHover = require('./hooks/UNSAFE_useHover.js');
var hooks_UNSAFE_useActive = require('./hooks/UNSAFE_useActive.js');
require('./utils/UNSAFE_classNames.js');
var compat = require('preact/compat');

var utils_UNSAFE_interpolations_dimensions = require('./utils/UNSAFE_interpolations/dimensions.js');
var utils_UNSAFE_mergeInterpolations = require('./utils/UNSAFE_mergeInterpolations.js');
require('./utils/PRIVATE_clientHints.js');
var hooks_UNSAFE_useTabbableMode = require('./hooks/UNSAFE_useTabbableMode.js');
var utils_UNSAFE_mergeProps = require('./utils/UNSAFE_mergeProps.js');
var clientHints$1 = require('./clientHints-6f362777.js');
var classNames = require('./classNames-fe0c9b44.js');

const NullFunction = () => null;

const activeStyles = {
  backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-bg-color-active)',
  borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color-active)',
  color: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-text-color-active)'
};
const hoverStyles = {
  backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-bg-color-hover)',
  borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-border-color-hover)',
  color: 'var(--oj-c-PRIVATE-DO-NOT-USE-base-button-text-color-hover)'
};
const compStyles = {
  base: "pn71mo",
  hover: "_1a0rjxt",
  active: "m5m13d",
  pseudohover: "_8oendx",
  pseudohoverSpan: "mauytz",
  unstyled: "_37pel2",
  min: "exms7p",
  fill: "_15893n3",
  container: "_1mjq7jl",
  embedded: "aahywa",
  noBorderRadiusStart: "_17scfdi",
  noBorderRadiusEnd: "ht1ihq",
  disabled: "_1q606dx",
  bottom: "_3yb4ny"
};
const childrenStyles = "h5bh9o";
const interpolations = [...Object.values(utils_UNSAFE_interpolations_dimensions.dimensionInterpolations)];
const styleInterpolations = utils_UNSAFE_mergeInterpolations.mergeInterpolations(interpolations);
const clientHints = clientHints$1.getClientHints(); // :active only works on IOS devices if a touch handler exists

const iosProps = clientHints.platform === 'ios' ? {
  ontouchstart: function () {}
} : {};
const isHybrid = clientHints$1.getClientHints().isHybrid;

const roleProps = (elType, hidden) => {
  switch (elType) {
    case 'link':
      return {
        role: 'link'
      };

    case 'button':
      return {};

    default:
      return hidden ? {
        role: 'generic'
      } : {
        role: 'button'
      };
  }
};

const BaseButton = compat.forwardRef((_a, ref) => {
  var {
    variant = 'outlined',
    isDisabled = false,
    isRepeat = false,
    size = 'md',
    elementDetails = {
      type: 'button'
    },
    styling = ['default'],
    edge = 'none',
    accessibleLabel,
    ariaHidden,
    ariaExpanded,
    ariaRoledescription
  } = _a,
      props = tslib_es6.__rest(_a, ["variant", "isDisabled", "isRepeat", "size", "elementDetails", "styling", "edge", "accessibleLabel", "ariaHidden", "ariaExpanded", "ariaRoledescription"]);

  const {
    pressProps
  } = hooks_UNSAFE_usePress.usePress(props.onAction ? props.onAction : NullFunction, {
    isDisabled,
    isRepeat
  });

  const isStyled = name => {
    return styling.indexOf(name) > -1;
  };

  const {
    hoverProps,
    isHover
  } = hooks_UNSAFE_useHover.useHover({
    isDisabled: !isHybrid
  });
  const {
    activeProps,
    isActive
  } = hooks_UNSAFE_useActive.useActive();

  const _b = styleInterpolations(props),
        {
    class: cls
  } = _b,
        styles = tslib_es6.__rest(_b, ["class"]);

  const _c = Object.assign({}, elementDetails),
        {
    type: elementType = 'button'
  } = _c,
        elementProps = tslib_es6.__rest(_c, ["type"]);

  const role = roleProps(elementType, ariaHidden !== null && ariaHidden !== void 0 ? ariaHidden : false);
  const tooltip = props.title || accessibleLabel;
  const ElementType = elementDetails.type;
  const isSpan = ElementType == 'span';
  const isBaseButton = ElementType == 'button';
  const {
    isTabbable
  } = hooks_UNSAFE_useTabbableMode.useTabbableMode();
  const rootStyles = classNames.classNames([!isStyled('unstyled') && compStyles.base, isStyled('unstyled') && compStyles.unstyled, isStyled('embedded') && compStyles.embedded, isStyled('container') && compStyles.container, isStyled('noBorderRadiusStart') && compStyles.noBorderRadiusStart, isStyled('noBorderRadiusEnd') && compStyles.noBorderRadiusEnd, isStyled('active') && compStyles.active, isStyled('fill') && compStyles.fill, isStyled('min') && compStyles.min, `oj-c-base-button-${variant}`, `oj-c-base-button-${size}`, isDisabled && compStyles.disabled, edge === 'bottom' && compStyles.bottom, !isHybrid && !isSpan && !isActive && compStyles.pseudohover, !isHybrid && isSpan && !isActive && !isDisabled && !isStyled('container') && compStyles.pseudohoverSpan, isHybrid && isHover && !isActive && !isDisabled && !isStyled('container') && compStyles.hover, !isStyled('container') && isActive && !isDisabled && compStyles.active, childrenStyles]);
  const mergedProps = utils_UNSAFE_mergeProps.mergeProps(elementProps, pressProps, iosProps, hoverProps, isStyled('container') ? {} : activeProps, isBaseButton ? {} : {
    'aria-disabled': isDisabled
  });
  return jsxRuntime.jsx(ElementType // The ref casting was done to satisfy TS compiler, when the forwardRef had to be updated to ForwardedRef.
  , Object.assign({
    // The ref casting was done to satisfy TS compiler, when the forwardRef had to be updated to ForwardedRef.
    ref: ref,
    disabled: isDisabled,
    class: `${rootStyles} ${cls}`,
    style: styles,
    autofocus: props['autofocus'],
    title: tooltip,
    tabIndex: isDisabled || !isTabbable ? -1 : 0,
    "aria-label": accessibleLabel,
    "aria-hidden": ariaHidden,
    "aria-roledescription": ariaRoledescription,
    "aria-expanded": ariaExpanded
  }, mergedProps, role, {
    children: props.children
  }));
});

exports.BaseButton = BaseButton;
/*  */
//# sourceMappingURL=BaseButton-1c38289b.js.map
