/* @oracle/oraclejet-preact: 14.0.4 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('preact/jsx-runtime');
var preact = require('preact');
var compat = require('preact/compat');
var hooks = require('preact/hooks');
var hooks_UNSAFE_useClearIcon = require('./hooks/UNSAFE_useClearIcon.js');
var hooks_UNSAFE_useFocusableTextField = require('./hooks/UNSAFE_useFocusableTextField.js');
var hooks_UNSAFE_useFormContext = require('./hooks/UNSAFE_useFormContext.js');
var hooks_UNSAFE_useFormFieldContext = require('./hooks/UNSAFE_useFormFieldContext.js');
var hooks_UNSAFE_useHover = require('./hooks/UNSAFE_useHover.js');
var hooks_UNSAFE_useLengthFilter = require('./hooks/UNSAFE_useLengthFilter.js');
var hooks_UNSAFE_useTextField = require('./hooks/UNSAFE_useTextField.js');
var UNSAFE_Label = require('./UNSAFE_Label.js');
var hooks_UNSAFE_usePrefixSuffix = require('./hooks/UNSAFE_usePrefixSuffix.js');
var UNSAFE_TextField = require('./UNSAFE_TextField.js');
var UNSAFE_UserAssistance = require('./UNSAFE_UserAssistance.js');
require('./utils/PRIVATE_clientHints.js');
var utils_UNSAFE_componentUtils = require('./utils/UNSAFE_componentUtils.js');
var ClearIcon = require('./ClearIcon-2d70a092.js');
var hooks_UNSAFE_useCurrentValueReducer = require('./hooks/UNSAFE_useCurrentValueReducer.js');
var ReadonlyTextFieldInput = require('./ReadonlyTextFieldInput-b98e7e48.js');
var TextFieldInput = require('./TextFieldInput-6db2cca1.js');
var clientHints = require('./clientHints-6f362777.js');
require('./hooks/UNSAFE_useToggle.js');
require('./tslib.es6-e79a0c43.js');
require('./hooks/UNSAFE_useFocusWithin.js');
require('./useFocusWithin-69dca42b.js');
require('./utils/UNSAFE_lengthFilter.js');
require('./hooks/UNSAFE_useId.js');
require('./utils/UNSAFE_classNames.js');
require('./classNames-fe0c9b44.js');
require("identity-obj-proxy");
require('./UNSAFE_PrefixSuffix.js');
require('./hooks/UNSAFE_useUser.js');
require('./UNSAFE_Environment.js');
require('./UNSAFE_Layer.js');
require('./UNSAFE_LabelValueLayout.js');
require('./UNSAFE_Flex.js');
require('./Flex-70f45c1b.js');
require('./utils/UNSAFE_interpolations/dimensions.js');
require('./utils/UNSAFE_arrayUtils.js');
require('./utils/UNSAFE_size.js');
require('./_curry1-8dba47c0.js');
require('./utils/UNSAFE_mergeInterpolations.js');
require('./_curry3-a11ae74a.js');
require('./_curry2-35fe759b.js');
require('./_has-f646b7fa.js');
require('./utils/UNSAFE_interpolations/boxalignment.js');
require('./keys-fcc45418.js');
require('./utils/UNSAFE_interpolations/flexbox.js');
require('./flexbox-e7360e12.js');
require('./utils/UNSAFE_interpolations/flexitem.js');
require('./flexitem-21bb492c.js');
require('./FormControlUtils-d37ad806.js');
require('./hooks/UNSAFE_useTranslationBundle.js');
require('./hooks/UNSAFE_useDebounce.js');
require('./UNSAFE_LiveRegion.js');
require('./hooks/UNSAFE_useTabbableMode.js');
require('./utils/UNSAFE_interpolations/text.js');
require('./hooks/UNSAFE_useTextFieldInputHandlers.js');
require('./InlineHelpSource-a08875c6.js');
require('./UNSAFE_ComponentMessage.js');
require('./ComponentMessage-1905b2ad.js');
require('./PRIVATE_Message.js');
require('./utils/PRIVATE_timer.js');
require('./MessageCloseButton-a750b114.js');
require('./UNSAFE_Button.js');
require('./Button-fe40b39e.js');
require('./UNSAFE_BaseButton.js');
require('./BaseButton-1c38289b.js');
require('./hooks/UNSAFE_usePress.js');
require('./hooks/UNSAFE_useActive.js');
require('./utils/UNSAFE_mergeProps.js');
require('./index-7cf551b0.js');
require('./index-fbc2a690.js');
require('./UNSAFE_Icon.js');
require('./Icon-837976e5.js');
require('./hooks/UNSAFE_useTooltip.js');
require('./UNSAFE_Floating.js');
require('./Floating-cea8b705.js');
require('./index-b2f63b8c.js');
require('./utils/PRIVATE_floatingUtils.js');
require('./utils/PRIVATE_refUtils.js');
require('./hooks/UNSAFE_useOutsideClick.js');
require('./hooks/UNSAFE_useFocus.js');
require('./hooks/UNSAFE_useTouch.js');
require('./hooks/UNSAFE_useAnimation.js');
require('./useAnimation-694a2e01.js');
require('./hooks/UNSAFE_useTheme.js');
require('./MessageDetail-7665d979.js');
require('./MessageFormattingUtils-55602416.js');
require('./utils/UNSAFE_getLocale.js');
require('./utils/UNSAFE_stringUtils.js');
require('./stringUtils-1981a409.js');
require('./Message.types-927ccb0d.js');
require('./MessageStartIcon-69d47882.js');
require('./MessageSummary-b3abe0a3.js');
require('./MessageTimestamp-bcf4ac8d.js');
require('./MessageUtils-8466a219.js');
require('./utils/UNSAFE_logger.js');
require('./utils/UNSAFE_soundUtils.js');
require('./MessagesManager-ebefea19.js');
require('./PRIVATE_TransitionGroup.js');
require('./hooks/UNSAFE_useMessagesContext.js');
require('./UNSAFE_HiddenAccessible.js');
require('./HiddenAccessible-4269453d.js');
require('./ComponentMessageContainer-8a5a2ea4.js');

const InputText = compat.forwardRef(({ ariaDescribedBy, assistiveText, autoComplete = 'off', autoFocus = false, hasClearIcon = 'never', endContent, helpSourceLink, helpSourceText, isDisabled: propIsDisabled, isReadonly: propIsReadonly, isRequired = false, isRequiredShown, label, labelEdge: propLabelEdge, labelStartWidth: propLabelStartWidth, maxLength, maxLengthUnit, messages, placeholder, prefix, role, startContent, suffix, textAlign: propTextAlign, userAssistanceDensity: propUserAssistanceDensity, value, variant = 'default', virtualKeyboard, onInput, onCommit }, ref) => {
    const { currentCommitValue, dispatch } = hooks_UNSAFE_useCurrentValueReducer.useCurrentValueReducer({ value });
    const onInputAndDispatch = hooks.useCallback((detail) => {
        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)
        dispatch({ type: 'input', payload: detail.value });
        onInput === null || onInput === void 0 ? void 0 : onInput(detail);
    }, [onInput, dispatch]);
    const onCommitAndDispatch = hooks.useCallback((detail) => {
        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)
        dispatch({ type: 'commit', payload: detail.value });
        onCommit === null || onCommit === void 0 ? void 0 : onCommit(detail);
    }, [onCommit, dispatch]);
    const { isDisabled: isFormDisabled, isReadonly: isFormReadonly, labelEdge: formLabelEdge, labelStartWidth: formLabelStartWidth, textAlign: formTextAlign, userAssistanceDensity: formUserAssistanceDensity } = hooks_UNSAFE_useFormContext.useFormContext();
    // default to FormContext values if component properties are not specified
    const isDisabled = propIsDisabled !== null && propIsDisabled !== void 0 ? propIsDisabled : isFormDisabled;
    const isReadonly = propIsReadonly !== null && propIsReadonly !== void 0 ? propIsReadonly : isFormReadonly;
    const labelEdge = propLabelEdge !== null && propLabelEdge !== void 0 ? propLabelEdge : formLabelEdge;
    const labelStartWidth = propLabelStartWidth !== null && propLabelStartWidth !== void 0 ? propLabelStartWidth : formLabelStartWidth;
    const textAlign = propTextAlign !== null && propTextAlign !== void 0 ? propTextAlign : formTextAlign;
    const userAssistanceDensity = propUserAssistanceDensity !== null && propUserAssistanceDensity !== void 0 ? propUserAssistanceDensity : formUserAssistanceDensity;
    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = hooks_UNSAFE_useFocusableTextField.useFocusableTextField({ isDisabled, isReadonly, ref });
    const { hoverProps, isHover } = hooks_UNSAFE_useHover.useHover({ isDisabled: isReadonly || isDisabled || false });
    const { baseId, formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } = hooks_UNSAFE_useTextField.useTextField({
        ariaDescribedBy,
        isDisabled,
        isFocused,
        isReadonly,
        labelEdge,
        messages,
        styleVariant: variant,
        value
    });
    const onClickClearIcon = hooks.useCallback(() => {
        var _a;
        // Clicking the clear icon should put the focus on the input field
        (_a = enabledElementRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        // Send an event to clear the field's value
        onInputAndDispatch === null || onInputAndDispatch === void 0 ? void 0 : onInputAndDispatch({ previousValue: value, value: '' });
    }, [onInputAndDispatch, value]);
    const maybeClearIcon = hooks_UNSAFE_useClearIcon.useClearIcon({
        clearIcon: jsxRuntime.jsx(ClearIcon.ClearIcon, { onClick: onClickClearIcon }),
        display: hasClearIcon,
        hasValue: formFieldContext.hasValue,
        isFocused,
        isEnabled: !isReadonly && !isDisabled,
        isHover
    });
    const endContentCombined = utils_UNSAFE_componentUtils.beforeVNode(endContent, maybeClearIcon);
    const { renderedPrefix, renderedSuffix, text: valuePrefixSuffix, ariaLabelledBy } = hooks_UNSAFE_usePrefixSuffix.usePrefixSuffix({
        baseId,
        hasEndContent: endContent !== undefined,
        hasInsideLabel: label !== undefined && labelEdge === 'inside',
        hasStartContent: startContent !== undefined,
        hasValue: formFieldContext.hasValue,
        isDisabled,
        isFocused,
        labelId: labelProps.id,
        prefix,
        suffix,
        value
    });
    // Handle length filter for user-typed inputs and controlled inputs
    const { isMaxLengthExceeded, valueLength, onFilteredInput } = hooks_UNSAFE_useLengthFilter.useLengthFilter({
        maxLength,
        maxLengthUnit,
        value,
        onInput: onInputAndDispatch,
        onCommit: onCommitAndDispatch
    });
    const labelComp = labelEdge !== 'none' ? jsxRuntime.jsx(UNSAFE_Label.Label, Object.assign({}, labelProps, { children: label })) : undefined;
    const fieldLabelProps = {
        label: labelEdge !== 'none' ? labelComp : undefined,
        labelEdge: labelEdge !== 'none' ? labelEdge : undefined,
        labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined
    };
    const ariaLabel = labelEdge === 'none' ? label : undefined;
    const inlineUserAssistance = isDisabled || isReadonly ? (
    // save space for user assistance if density is 'efficient', even though we don't
    // render user assistance for disabled or readonly fields
    userAssistanceDensity !== 'efficient' ? undefined : (jsxRuntime.jsx(UNSAFE_UserAssistance.InlineUserAssistance, Object.assign({ userAssistanceDensity: userAssistanceDensity }, userAssistanceProps)))) : (jsxRuntime.jsx(UNSAFE_UserAssistance.InlineUserAssistance, Object.assign({ assistiveText: assistiveText, fieldLabel: label, helpSourceLink: helpSourceLink, helpSourceText: helpSourceText, messages: messages, isRequiredShown: isRequiredShown, userAssistanceDensity: userAssistanceDensity }, userAssistanceProps)));
    if (isReadonly) {
        // TODO: should be able to configure whether start/end content is shown when readonly
        // JET-49916 - Preact InputText: show start/end content when readonly
        return (jsxRuntime.jsx(hooks_UNSAFE_useFormFieldContext.FormFieldContext.Provider, Object.assign({ value: formFieldContext }, { children: jsxRuntime.jsx(UNSAFE_TextField.ReadonlyTextField, Object.assign({ role: "presentation", inlineUserAssistance: inlineUserAssistance, onBlur: focusProps.onfocusout, onFocus: focusProps.onfocusin }, fieldLabelProps, { children: jsxRuntime.jsx(ReadonlyTextFieldInput.ReadonlyTextFieldInput, { ariaDescribedBy: ariaDescribedBy, ariaLabel: ariaLabel, ariaLabelledBy: labelProps.id, as: "div", autoFocus: autoFocus, elementRef: readonlyElementRef, textAlign: textAlign, value: valuePrefixSuffix, hasInsideLabel: label !== undefined && labelEdge === 'inside' }) })) })));
    }
    const mainContent = (jsxRuntime.jsxs(preact.Fragment, { children: [renderedPrefix, jsxRuntime.jsx(TextFieldInput.TextFieldInput, Object.assign({ ariaLabelledBy: ariaLabelledBy, ariaLabel: ariaLabel, autoComplete: autoComplete, autoFocus: autoFocus, currentCommitValue: currentCommitValue, hasEndContent: endContent !== undefined, hasInsideLabel: labelComp !== undefined && labelEdge === 'inside', hasPrefix: renderedPrefix !== undefined, hasStartContent: startContent !== undefined, hasSuffix: renderedSuffix !== undefined, inputRef: enabledElementRef, isRequired: isRequired, placeholder: placeholder, role: role, textAlign: textAlign, type: isMobile() ? virtualKeyboard : undefined, value: isDisabled ? valuePrefixSuffix : value, onCommit: onCommitAndDispatch, onInput: onFilteredInput }, inputProps)), renderedSuffix, maxLength !== undefined && (jsxRuntime.jsx(UNSAFE_TextField.MaxLengthLiveRegion, Object.assign({}, { isMaxLengthExceeded, maxLength, valueLength })))] }));
    return (jsxRuntime.jsx(hooks_UNSAFE_useFormFieldContext.FormFieldContext.Provider, Object.assign({ value: formFieldContext }, { children: jsxRuntime.jsx(UNSAFE_TextField.TextField, Object.assign({ endContent: endContentCombined, inlineUserAssistance: inlineUserAssistance, mainContent: mainContent, onBlur: focusProps.onfocusout, onFocus: focusProps.onfocusin, startContent: startContent }, textFieldProps, fieldLabelProps, hoverProps)) })));
});
/**
 * Helper function to determine whether the current device is a mobile device
 * @returns true if runnning on a mobile device, false otherwise
 */
function isMobile() {
    const deviceType = clientHints.getClientHints().deviceType;
    return deviceType === 'phone' || deviceType === 'tablet';
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

exports.InputText = InputText;
/*  */
//# sourceMappingURL=UNSAFE_InputText.js.map
