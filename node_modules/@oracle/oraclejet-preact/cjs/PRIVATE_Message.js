/* @oracle/oraclejet-preact: 14.0.4 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('preact/jsx-runtime');
require("identity-obj-proxy");
var hooks = require('preact/hooks');
require('./UNSAFE_Flex.js');
var utils_PRIVATE_timer = require('./utils/PRIVATE_timer.js');
require('./utils/UNSAFE_classNames.js');
var MessageCloseButton = require('./MessageCloseButton-a750b114.js');
var classNames = require('./classNames-fe0c9b44.js');
var MessageDetail = require('./MessageDetail-7665d979.js');
var MessageFormattingUtils = require('./MessageFormattingUtils-55602416.js');
var MessageStartIcon = require('./MessageStartIcon-69d47882.js');
var MessageSummary = require('./MessageSummary-b3abe0a3.js');
var MessageTimestamp = require('./MessageTimestamp-bcf4ac8d.js');
var MessageUtils = require('./MessageUtils-8466a219.js');
var Flex = require('./Flex-70f45c1b.js');
var MessagesManager = require('./MessagesManager-ebefea19.js');
var Message_types = require('./Message.types-927ccb0d.js');
require('./tslib.es6-e79a0c43.js');
require('./utils/UNSAFE_interpolations/dimensions.js');
require('./utils/UNSAFE_arrayUtils.js');
require('./utils/UNSAFE_size.js');
require('./_curry1-8dba47c0.js');
require('./utils/UNSAFE_mergeInterpolations.js');
require('./_curry3-a11ae74a.js');
require('./_curry2-35fe759b.js');
require('./_has-f646b7fa.js');
require('./utils/UNSAFE_interpolations/boxalignment.js');
require('./keys-fcc45418.js');
require('./utils/UNSAFE_interpolations/flexbox.js');
require('./flexbox-e7360e12.js');
require('./utils/UNSAFE_interpolations/flexitem.js');
require('./flexitem-21bb492c.js');
require('./UNSAFE_Button.js');
require('./Button-fe40b39e.js');
require('./UNSAFE_BaseButton.js');
require('./BaseButton-1c38289b.js');
require('./hooks/UNSAFE_usePress.js');
require('./hooks/UNSAFE_useHover.js');
require('./hooks/UNSAFE_useToggle.js');
require('./hooks/UNSAFE_useActive.js');
require('preact/compat');
require('./utils/PRIVATE_clientHints.js');
require('./clientHints-6f362777.js');
require('./hooks/UNSAFE_useTabbableMode.js');
require('preact');
require('./utils/UNSAFE_mergeProps.js');
require('./index-7cf551b0.js');
require('./index-fbc2a690.js');
require('./UNSAFE_Icon.js');
require('./Icon-837976e5.js');
require('./hooks/UNSAFE_useTooltip.js');
require('./hooks/UNSAFE_useId.js');
require('./UNSAFE_Floating.js');
require('./Floating-cea8b705.js');
require('./index-b2f63b8c.js');
require('./hooks/UNSAFE_useUser.js');
require('./UNSAFE_Environment.js');
require('./UNSAFE_Layer.js');
require('./utils/PRIVATE_floatingUtils.js');
require('./utils/PRIVATE_refUtils.js');
require('./hooks/UNSAFE_useOutsideClick.js');
require('./hooks/UNSAFE_useFocus.js');
require('./hooks/UNSAFE_useTouch.js');
require('./hooks/UNSAFE_useAnimation.js');
require('./useAnimation-694a2e01.js');
require('./hooks/UNSAFE_useTheme.js');
require('./utils/UNSAFE_getLocale.js');
require('./utils/UNSAFE_stringUtils.js');
require('./stringUtils-1981a409.js');
require('./utils/UNSAFE_logger.js');
require('./utils/UNSAFE_soundUtils.js');
require('./PRIVATE_TransitionGroup.js');
require('./hooks/UNSAFE_useMessagesContext.js');

const messageStartIconStyles = {
  base: "ve4j8v",
  toast: "awd03f"
};
/**
 * Component for rendering custom icon/content for start icon in Message
 */

function MessageCustomStartIcon({
  item,
  renderer
}) {
  const classes = classNames.classNames([messageStartIconStyles.base, // for now only toast has support for custom icon
  messageStartIconStyles.toast]);
  return jsxRuntime.jsx("div", Object.assign({
    class: classes,
    role: "presentation"
  }, {
    children: renderer(item)
  }));
}

const messageHeaderStyles = {
  base: "_1rqvxfy",
  banner: "_1yvearb",
  inline: undefined,
  toast: "jk7m72"
};
/**
 * A component that styles the header for the message component
 * @param param0 Props
 * @returns MessageHeader component instance
 */

function MessageHeader({
  children,
  variant = 'banner'
}) {
  const rootClasses = classNames.classNames([messageHeaderStyles.base, messageHeaderStyles[variant]]);
  return jsxRuntime.jsx("div", Object.assign({
    role: "presentation",
    class: rootClasses
  }, {
    children: children
  }));
}

/**
 * Determines the base variant of the message - banner or toast
 *
 * @param variant The message variant
 * @returns The base variant
 */

function getBaseVariant(variant) {
  if (variant === 'pageBanner' || variant === 'sectionBanner') {
    return 'banner';
  }

  return 'toast';
}
/**
 * Determines if a severity icon is needed based on the component severity
 *
 * @param severity The component severity
 * @returns Whether or not to render the severity icon
 */


function isSeverityIconNeeded(severity) {
  const isValidSeverity = MessageFormattingUtils.isValidValueForProp(severity, 'severity');
  return isValidSeverity && severity !== 'none';
}
/**
 * CSS styles for various components
 */


const messageStyles = {
  base: {
    banner: "_1itf3tj",
    toast: "_1vhr4sz"
  },
  section: "_1lo64k8",
  // TODO: Replace with Flex and View components to handle padding and flex
  content: {
    base: "_7d0pvw",
    banner: "kpwjgy",
    toast: "_1m2npx3"
  }
};
/**
 * Default timeout duration for autoTimeout in milliseconds
 */

const MIN_SECONDS = 5;
const DEFAULT_TIMEOUT = MIN_SECONDS * 1000;
/**
 * Component that renders an individual message
 */

function Message({
  closeButtonRenderer,
  detailRenderer,
  iconRenderer,
  index = -1,
  item,
  onClose,
  messageRef = () => {},
  variant = 'pageBanner',
  translations
}) {
  const {
    closeAffordance = 'on',
    severity = 'error',
    sound,
    summary,
    timestamp
  } = item.data;
  const {
    autoTimeout = 'off'
  } = item.data;
  const baseVariant = getBaseVariant(variant);
  /**
   * Handles clicking on the close icon of the message
   */

  const handleClose = hooks.useCallback(() => {
    onClose === null || onClose === void 0 ? void 0 : onClose(item);
  }, [item, onClose]);
  /**
   * Handles closing the message on pressing Esc
   */

  const handleCloseOnEsc = hooks.useCallback(event => {
    // Close the message only when closeAffordance is on
    if (event.key === 'Escape' && closeAffordance === 'on') {
      onClose === null || onClose === void 0 ? void 0 : onClose(item);
    }
  }, [closeAffordance, item, onClose]);
  /**
   * Set auto timeout for toast messages
   */

  const shouldTimeout = baseVariant === 'toast' && autoTimeout !== 'off';
  const currentTimerRef = hooks.useRef();
  const timeout = typeof autoTimeout === 'number' ? autoTimeout : DEFAULT_TIMEOUT;
  const timeoutDuration = autoTimeout === 'on' ? DEFAULT_TIMEOUT : timeout;
  const startTimer = hooks.useCallback(() => {
    if (currentTimerRef.current) return;
    currentTimerRef.current = new utils_PRIVATE_timer.Timer(handleClose, timeoutDuration);
  }, [handleClose, timeoutDuration]);
  const clearTimer = hooks.useCallback(() => {
    if (!currentTimerRef.current) return;
    currentTimerRef.current.clear();
    currentTimerRef.current = undefined;
  }, []);
  const pauseTimer = hooks.useCallback(() => {
    var _a;

    (_a = currentTimerRef.current) === null || _a === void 0 ? void 0 : _a.pause();
  }, []);
  const resumeTimer = hooks.useCallback(() => {
    var _a;

    (_a = currentTimerRef.current) === null || _a === void 0 ? void 0 : _a.resume();
  }, []);
  hooks.useEffect(() => {
    if (MessageFormattingUtils.isValidValueForProp(sound)) {
      // It is sufficient to check for the value to be a
      // non-empty string. The playSound method takes care of the rest.
      MessageUtils.playSound(sound);
    } // on mount, start timer for toast messages if needed


    if (shouldTimeout) {
      startTimer();
    }

    return () => {
      // clear out any pending timer
      clearTimer();
    }; // eslint-disable-next-line
  }, []); // No deps to run this only on mount

  const rootClasses = classNames.classNames([messageStyles.base[baseVariant], // for now, we do not have severity based styling on toast. So, we ignore this class for toasts
  variant !== 'toast' && MessageUtils.severityBasedStyleClass(severity, baseVariant), variant === 'sectionBanner' && messageStyles.section]);
  const contentClasses = classNames.classNames([messageStyles.content.base, messageStyles.content[baseVariant]]); // We will be animating the root div, so add padding to an inner wrapper div so that
  // when animating height looks smooth. If padding were to be added to the root
  // div, the animation will not be smooth as height will never reach 0 due to the
  // padding.

  return jsxRuntime.jsx("div", Object.assign({
    ref: messageRef,
    class: rootClasses,
    role: "alert",
    "aria-atomic": "true",
    tabIndex: 0,
    onKeyUp: handleCloseOnEsc,
    onfocusin: pauseTimer,
    onfocusout: resumeTimer
  }, {
    children: jsxRuntime.jsxs("div", Object.assign({
      class: contentClasses
    }, {
      children: [iconRenderer ? jsxRuntime.jsx(MessageCustomStartIcon, {
        item: Object.assign(Object.assign({}, item), {
          index
        }),
        renderer: iconRenderer
      }) : isSeverityIconNeeded(severity) ? jsxRuntime.jsx(MessageStartIcon.MessageStartIcon, {
        severity: severity,
        variant: baseVariant,
        translations: translations
      }) : null, jsxRuntime.jsxs(Flex.Flex, Object.assign({
        direction: "column",
        flex: "1",
        gap: "--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x"
      }, {
        children: [jsxRuntime.jsxs(MessageHeader, Object.assign({
          variant: baseVariant
        }, {
          children: [jsxRuntime.jsx(MessageSummary.MessageSummary, {
            variant: baseVariant,
            text: summary
          }), MessageFormattingUtils.isValidValueForProp(timestamp, 'timestamp') && variant !== 'toast' && jsxRuntime.jsx(MessageTimestamp.MessageTimestamp, {
            variant: baseVariant,
            value: timestamp
          })]
        })), jsxRuntime.jsx(MessageDetail.MessageDetail, {
          variant: baseVariant,
          item: Object.assign(Object.assign({}, item), {
            index
          }),
          renderer: detailRenderer
        })]
      })), closeAffordance === 'on' && jsxRuntime.jsx(MessageCloseButton.MessageCloseButton, {
        buttonRenderer: closeButtonRenderer,
        title: translations === null || translations === void 0 ? void 0 : translations.close,
        variant: baseVariant,
        onAction: handleClose
      })]
    }))
  }));
}

/**
 * @license
 * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.
 * The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */

exports.MessageCloseButton = MessageCloseButton.MessageCloseButton;
exports.MessageDetail = MessageDetail.MessageDetail;
exports.formatTimestamp = MessageFormattingUtils.formatTimestamp;
exports.isValidValueForProp = MessageFormattingUtils.isValidValueForProp;
exports.MessageStartIcon = MessageStartIcon.MessageStartIcon;
exports.MessageSummary = MessageSummary.MessageSummary;
exports.MessageTimestamp = MessageTimestamp.MessageTimestamp;
exports.getRenderer = MessageUtils.getRenderer;
exports.getRendererWithoutIndex = MessageUtils.getRendererWithoutIndex;
exports.isSeverityIconNeeded = MessageUtils.isSeverityIconNeeded;
exports.playSound = MessageUtils.playSound;
exports.severityBasedStyleClass = MessageUtils.severityBasedStyleClass;
exports.throwError = MessageUtils.throwError;
exports.MessagesManager = MessagesManager.MessagesManager;
exports.severities = Message_types.severities;
exports.Message = Message;
/*  */
//# sourceMappingURL=PRIVATE_Message.js.map
